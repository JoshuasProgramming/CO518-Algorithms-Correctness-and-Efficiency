/**
 * For COMP5180 Assessment 1 2022/23
 * 
 * DO NOT EDIT THIS FILE.
 * 
 * Implenting a DynamicArray as described in the week 10 case study.
 * To show  how dynamic arrays work in practice.
 * 
 * This class will be extended in the MyUoKDynamicArray.java file, supplied.
 * 
 * All your edits must be in the MyUoKDynamicArray.java file. 
 * During marking, your file will be tested with our copy of DynamicArray.java, so
 * any edits you make to this file will be disregarded when we test your code.
 * 
 * 
 * DO NOT EDIT THIS FILE.
 * 
 * @author akj22
 * 
 * From Week 10 lecture slides:
 * 
 * Our dynamic array for this assignment has three fields relating to the array:
 * 1. hidden array of fixed length - storage for actual content of the DynamicArray object
 * 2. an integer index that points to the next free slot in the array
 * 3. an integer field giving the length of the hidden array (the “capacity”); equivalent to performing the length function on the hidden array.
 * 
 * We also maintain two global variables for the purpose of calculating runtime performance for the add operation. 
 * opCountForAdds keeps track of how many single operations are performed on the contents of the hidden array over the lifetime of the DynamicArray object
 * numItemsAdded keeps track of how many items are added over the lifetime of the DynamicArray object
 * 
 */
package comp5180a12022;

public class DynamicArray {

    // Our dynamic array for this assignment has three fields:

    /**
     * hidden array of fixed length - storage for actual content of the
     * dynamic array object
     */
    protected int[] hiddenArray;

    /**
     * an integer index that points to the next free slot in the array
     */
    protected int nextFreeSlot;

    /**
     * the number of items that the hidden array can hold
     * (equivalent to performing the length function on the hidden array.)
     */
    protected int capacity;

    // We also maintain two global variables for the purpose of calculating runtime
    // performance.

    /**
     * opCountForAdds keeps track of how many single operations are performed on
     * the contents of the hidden array over the lifetime of the DynamicArray
     * object
     */
    protected int opCountForAdds;

    /**
     * numItemsAdded keeps track of how many items are added to the dynamic array over
     * the lifetime of the DynamicArray object
     */
    protected int numItemsAdded;

    /**
     * Constructor for objects of class DynamicArray where the initial length is
     * not specified.
     * We default to create a dynamic array with initial length 10
     * This constructor creates an DynamicArray object with no content in the
     * hidden array.
     */
    public DynamicArray() {
        this(10);
    }

    /**
     * Constructor for objects of class DynamicArray where the initial length is
     * specified as a parameter.
     * If the initial length is specified as a negative number, we default to create
     * a dynamic array with initial length 10
     * This constructor creates an DynamicArray object with no content in the
     * hidden array.
     * 
     * @param length the desired initial length of the fixed array being used to
     *               store items in the DynamicArray object
     */
    public DynamicArray(int length) {
        if (length < 0) { // if length is a negative number then just create an array of length 10 by
                          // default, as in the constructor
            length = 10;
        }
        ;
        hiddenArray = new int[length];
        nextFreeSlot = 0; // as the hidden array is empty when a new DynamicArray object is created,
                          // the
                          // next free cell available for data will be at index 0
        capacity = length;
        opCountForAdds = 0;
        numItemsAdded = 0;
    }

    /*
     * toString() method for a MyUoKDynamicArray object
     * 
     * @return a String representation of the MyUoKDynamicArray object
     */
    public String toString() {
        String returnString = "[";
        for (int i = 0; i < nextFreeSlot; i++) {
            returnString = returnString + hiddenArray[i] + " ";
        }
        returnString = returnString + "]"
                + " | next free slot = " + nextFreeSlot
                + " | hiddenCapacity = " + capacity
                + " | opCountForAdds = " + opCountForAdds + " | numItemsAdded = " + numItemsAdded;
        return returnString;
    }

    /**
     * This method enable the array to dynamically double in size every time it is
     * full, keeping track of the number of "copy/add item" operations
     * conducted.
     * 
     * do not edit this method
     */
    protected final void expandArray() {
        int[] tempArray = hiddenArray;
        hiddenArray = new int[capacity * 2];
        for (int i = 0; i < capacity; i++) {
            hiddenArray[i] = tempArray[i];
            opCountForAdds++;
        }
        capacity = capacity * 2;
    }

    /**
     * thie method inserts the item given in the parameter into the hiddenArray
     * storage array
     * and increments the count of operations performed on contents of the
     * hiddenArray (opCountForAdds)
     * 
     * do not edit this method
     * 
     * @param item the item to be inserted into the hiddenArray storage array
     */
    protected final void insertIntoHiddenArray(int item) {
        hiddenArray[nextFreeSlot] = item;
        opCountForAdds++;
    }

    /**
     * This method does not work. You will fix it for Q1 in MyUoKDynamicArray.java
     * isFullQ1 in MyUoKDynamic Array will override this method
     * 
     * @return boolean this method will always return false
     * 
     *         Do not edit this method -
     *         instead edit the version of this method in MyUoKDynamicArray.java
     */
    boolean isFullQ1() {
        // DO NOT EDIT THIS METHOD. YOU WILL RECEIVE NO MARKS FOR EDITS MADE TO THIS
        // CODE.
        // For Q1, edit the isFullQ1 method in the MyUoKDynamicArray.java file.
        return false;
    }

    /**
     * This method calls insertIntoHiddenArray (to add the item to hiddenArray and
     * increment opCountForAdds),
     * updates the nextFreeSlot pointer to the next free slot in the hidden array
     * and increments the count of the overall number of items added (numItemsAdded)
     * 
     * do not edit this method
     * 
     * @param item the item to be added to the hiddenArray storage array
     */
    final void addItem(int item) {
        if (isFullQ1()) {
            expandArray();
        }
        insertIntoHiddenArray(item);
        nextFreeSlot++;
        numItemsAdded++;
    }
}
